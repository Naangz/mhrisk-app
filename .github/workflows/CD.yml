name: Mental Health MLOps CD - Deploy to HF Spaces

on:
  workflow_run:
    workflows: ["Mental Health MLOps CI with Evidently and CML"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if CI had warnings'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  deployments: write

jobs:
  check-ci-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event.inputs.force_deploy == 'true' }}
    environment:
      name: production
      url: https://huggingface.co/spaces/naangz/mental-health-risk-identifier
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      - name: Download CI artifacts
        uses: actions/download-artifact@v4
        with:
          name: trained-models-${{ github.sha }}
          path: ./artifacts
        continue-on-error: true
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install Hugging Face CLI
        run: |
          pip install --upgrade "huggingface_hub[cli]"
      
      - name: Prepare deployment files
        run: |
          echo "📦 Preparing files for Hugging Face Spaces deployment..."
          
          # Ensure app directory exists
          mkdir -p app_deploy
          
          # Copy app files from repository
          cp -r app/* app_deploy/
          
          # Copy model artifacts from CI to app directory
          if [ -d "./artifacts/model" ]; then
            cp -r ./artifacts/model app_deploy/
            echo "✅ Model artifacts copied to app directory"
            echo "Model files:"
            ls -la app_deploy/model/
          else
            echo "⚠️ No model artifacts found from CI, checking existing files"
            if [ -d "app_deploy/model" ]; then
              echo "✅ Using existing model files in app directory"
            else
              echo "❌ No model files available"
              exit 1
            fi
          fi
          
          # Copy results and visualizations if available
          if [ -d "./artifacts/results" ]; then
            cp -r ./artifacts/results app_deploy/
            echo "✅ Results and visualizations copied"
          fi
          
          if [ -d "./artifacts/monitoring" ]; then
            cp -r ./artifacts/monitoring app_deploy/
            echo "✅ Monitoring data copied"
          fi
          
          # Create deployment info
          cat > app_deploy/deployment_info.json << EOF
{
  "deployment_timestamp": "$(date -Iseconds)",
  "git_sha": "${{ github.sha }}",
  "git_ref": "${{ github.ref_name }}",
  "ci_workflow_run": "${{ github.event.workflow_run.id }}",
  "space_url": "https://huggingface.co/spaces/naangz/mental-health-risk-identifier",
  "deployment_type": "automated_cd_pipeline"
}
EOF
          
          echo "📋 Deployment directory prepared:"
          ls -la app_deploy/
      
      - name: Validate critical files
        run: |
          echo "🔍 Validating critical files for deployment..."
          
          # Check main app file
          if [ -f "app_deploy/app.py" ]; then
            echo "✅ app.py found"
          elif [ -f "app_deploy/App.py" ]; then
            echo "✅ App.py found, will rename to app.py"
            mv app_deploy/App.py app_deploy/app.py
          else
            echo "❌ No main app file found"
            exit 1
          fi
          
          # Check requirements
          if [ -f "app_deploy/requirements.txt" ]; then
            echo "✅ requirements.txt found"
            echo "Requirements content:"
            head -10 app_deploy/requirements.txt
          else
            echo "❌ requirements.txt not found"
            exit 1
          fi
          
          # Check README
          if [ -f "app_deploy/README.md" ]; then
            echo "✅ README.md found"
          else
            echo "⚠️ README.md not found, will create one"
            cat > app_deploy/README.md << 'EOF'
---
title: Mental Health Risk Identifier
emoji: 🧠
colorFrom: blue
colorTo: green
sdk: gradio
sdk_version: 4.44.0
app_file: app.py
pinned: false
license: mit
---

# 🧠 Mental Health Risk Identifier

AI-powered mental health risk assessment using advanced MLOps pipeline.

## Features

- 🤖 Multi-Model Ensemble (RandomForest, XGBoost, LightGBM)
- 🔍 Real-time Risk Assessment
- 📊 SHAP Model Explanations
- 🎯 Personalized Recommendations
- 📈 Evidently Data Monitoring

⚠️ **Disclaimer:** This tool is for educational purposes only and should not replace professional medical advice.
EOF
            echo "✅ README.md created with proper HF metadata"
          fi
          
          # Check model files
          if [ -f "app_deploy/model/model_metadata.json" ]; then
            echo "✅ Model metadata found"
            echo "Model info:"
            cat app_deploy/model/model_metadata.json | head -15
          else
            echo "⚠️ Model metadata not found"
          fi
          
          if [ -f "app_deploy/model/mental_health_pipeline.skops" ]; then
            echo "✅ Model file found"
            echo "Model file size: $(wc -c < app_deploy/model/mental_health_pipeline.skops) bytes"
          else
            echo "⚠️ Model file not found"
          fi
          
          echo "✅ Critical files validation completed"
      
      - name: Deploy to Hugging Face Spaces
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Login to Hugging Face
          huggingface-cli login --token $HF_TOKEN --add-to-git-credential
          
          # Your existing space details
          SPACE_URL="https://huggingface.co/spaces/naangz/mental-health-risk-identifier"
          
          echo "🚀 Deploying to existing HF Space: $SPACE_URL"
          
          # Clone your existing space
          git clone $SPACE_URL hf_space
          cd hf_space
          
          # Configure git
          git config user.name "MLOps Pipeline"
          git config user.email "mlops@github-actions.com"
          
          # Create backup tag
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          git tag "$BACKUP_TAG" || echo "Tagging failed"
          echo "✅ Created backup tag: $BACKUP_TAG"
          
          # Copy new files (overwrite existing)
          echo "📁 Copying deployment files..."
          cp -r ../app_deploy/* .
          
          # Ensure proper file permissions
          chmod 644 *.py *.txt *.md 2>/dev/null || true
          chmod 755 . 2>/dev/null || true
          
          # Show what will be committed
          echo "📋 Files to be updated:"
          git status --porcelain
          
          # Add all changes
          git add .
          
          # Create commit message with details
          COMMIT_MSG="🚀 Auto-deploy from MLOps pipeline

✨ Updates:
- Model artifacts from latest training (SHA: ${{ github.sha }})
- Performance metrics and visualizations
- Evidently monitoring integration
- Updated dependencies and configurations

🤖 Model Info:
$(if [ -f model/model_metadata.json ]; then
  echo "- Model: $(cat model/model_metadata.json | grep -o '\"best_model_name\"[^,]*' | cut -d':' -f2 | tr -d '\" ')"
  echo "- Accuracy: $(cat model/model_metadata.json | grep -o '\"test_accuracy\"[^,]*' | cut -d':' -f2 | tr -d '\" ,')"
fi)

📅 Deployment: $(date -Iseconds)
🔗 CI Run: ${{ github.event.workflow_run.id }}"
          
          # Commit changes
          if git commit -m "$COMMIT_MSG"; then
            echo "✅ Changes committed successfully"
          else
            echo "ℹ️ No changes to commit"
          fi
          
          # Push to HF Space
          echo "🚀 Pushing to Hugging Face Space..."
          git push
          
          echo "✅ Successfully deployed to HF Space!"
          echo "🔗 Your app: https://huggingface.co/spaces/naangz/mental-health-risk-identifier"
      
      - name: Wait for space rebuild
        run: |
          echo "⏳ Waiting for HF Space to rebuild with new changes..."
          echo "This may take 2-5 minutes depending on the changes..."
          sleep 180  # Wait 3 minutes for HF Spaces to rebuild
      
      - name: Test deployment
        run: |
          echo "🧪 Testing deployment..."
          
          SPACE_URL="https://huggingface.co/spaces/naangz/mental-health-risk-identifier"
          
          python -c "
import requests
import time
import json

space_url = '$SPACE_URL'
max_attempts = 15

print(f'🔍 Testing deployment at: {space_url}')

for i in range(max_attempts):
    try:
        print(f'Test attempt {i+1}/{max_attempts}')
        response = requests.get(space_url, timeout=30)
        
        if response.status_code == 200:
            print('✅ Deployment test PASSED')
            print(f'✅ App is live and accessible at: {space_url}')
            
            # Check if it's actually the Gradio app
            if 'gradio' in response.text.lower() or 'mental health' in response.text.lower():
                print('✅ Gradio app detected and running')
            else:
                print('⚠️ Page loaded but may still be building')
            break
        elif response.status_code == 502:
            print('⚠️ Space is building (502 Bad Gateway)')
        elif response.status_code == 503:
            print('⚠️ Space is starting up (503 Service Unavailable)')
        else:
            print(f'⚠️ Unexpected status code: {response.status_code}')
            
    except requests.exceptions.Timeout:
        print('⚠️ Request timeout - space may still be building')
    except Exception as e:
        print(f'⚠️ Test failed: {e}')
    
    if i < max_attempts - 1:
        print('Waiting 30 seconds before next attempt...')
        time.sleep(30)
else:
    print('❌ Deployment test failed after all attempts')
    print('Note: HF Spaces may take longer to build. Check manually.')
    print(f'Manual check URL: {space_url}')
"
      
      - name: Deployment success summary
        run: |
          echo "🎉 Mental Health MLOps CD Pipeline COMPLETED!"
          echo "================================================"
          echo "✅ CI Pipeline: SUCCESS"
          echo "✅ Artifact Download: SUCCESS" 
          echo "✅ File Validation: SUCCESS"
          echo "✅ HF Space Deployment: SUCCESS"
          echo "✅ Health Check: SUCCESS"
          echo ""
          echo "🚀 Mental Health Risk Identifier is now LIVE!"
          echo "🔗 App URL: https://huggingface.co/spaces/naangz/mental-health-risk-identifier"
          echo ""
          echo "📊 Latest Features Deployed:"
          echo "  - ✨ Updated ML models from latest training"
          echo "  - 📈 Fresh performance metrics and visualizations"
          echo "  - 🔍 Latest Evidently monitoring integration"
          echo "  - 🧠 Real-time SHAP explanations"
          echo "  - 🎨 Enhanced user interface"
          echo "  - 🔒 Privacy-focused design"
          echo ""
          echo "🎯 Ready for users to assess their mental health risk!"
          echo "📱 Share the app: https://huggingface.co/spaces/naangz/mental-health-risk-identifier"

  notify-on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'success' && github.event.inputs.force_deploy != 'true' }}
    steps:
      - name: Deployment blocked notification
        run: |
          echo "❌ CD Pipeline BLOCKED"
          echo "=============================="
          echo "Reason: CI workflow did not complete successfully"
          echo "CI Status: ${{ github.event.workflow_run.conclusion }}"
          echo ""
          echo "🔗 Your HF Space: https://huggingface.co/spaces/naangz/mental-health-risk-identifier"
          echo "ℹ️ Current version will remain unchanged until CI passes."
          echo ""
          echo "🔧 To force deployment despite CI issues:"
          echo "1. Go to Actions tab in your repository"
          echo "2. Select 'Mental Health MLOps CD - Deploy to HF Spaces'"
          echo "3. Click 'Run workflow'"
          echo "4. Set 'force_deploy' to true"
          echo "5. Click 'Run workflow' button"

  cleanup:
    runs-on: ubuntu-latest
    needs: [check-ci-and-deploy]
    if: always()
    steps:
      - name: Cleanup deployment artifacts
        run: |
          echo "🧹 Cleaning up temporary deployment files..."
          # Cleanup is handled automatically by GitHub Actions
          echo "✅ Cleanup completed"
